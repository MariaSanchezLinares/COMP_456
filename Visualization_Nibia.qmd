---
title: "Visualization"
format: html
editor: visual
---



```{r, message = FALSE}
# Load Necessary Libraries
library(dplyr)
library(tm)
library(wordcloud)
library(RColorBrewer)
library(lubridate)      # For date manipulation functions
library(tidytext)       # For tokenization
library(pdftools) # For PDF text extraction
library(stringr)    # For string manipulation functions, including str_extract()
library(SnowballC)  # For the wordStem function
library(ggplot2)
library(textstem)
library(pdftools)
library(stringr)
library(purrr)
library(fs)  # For file handling
library(textstem)
library(text2vec)
```

# Data Collection

## Sample PDF
```{r, message = FALSE}
# maria's path
pdf_text_data <- pdf_text("../MEN Project/2020_el_tiempo/Alias Ariel, el poder oculto del Eln que opera en Venezuela.PDF")



print(pdf_text_data[1]) #For page 1
```

Now try this:
## Clean Sample PDF
```{r, message = FALSE}
cat(pdf_text_data[1]) #For page 1
```

## Extracting function
```{r, message = FALSE}

# Function to extract relevant information from a single PDF
extract_pdf_info <- function(pdf_file) {
  # Extract text from all pages of the PDF and concatenate
  pdf_text_data <- pdf_text(pdf_file)
  full_text <- paste(pdf_text_data, collapse = "\n")  # Combine all pages

  # Define extraction functions
  extract_date <- function(text) {
    date_pattern <- "(?<=Load-Date:)\\s*\\w+ \\d{1,2}, \\d{4}"
    date <- str_extract(text, date_pattern)
    return(date)
  }
  
  extract_title <- function(text) {
    lines <- str_split(text, "\n")[[1]]
    title <- lines[2]  # The title is on the second line
    return(str_trim(title))
  }

  extract_main_text <- function(text) {
    body_start <- str_locate(text, "Body")[, 1]
    classification_start <- str_locate(text, "Classification")[, 1]
    end_document_start <- str_locate(text, "End of Document")[, 1]
    main_text_end <- min(c(na.omit(c(classification_start, end_document_start))), na.rm = TRUE)
    
    if (!is.na(body_start) && !is.na(main_text_end)) {
      main_text <- str_sub(text, body_start + 5, main_text_end - 1)  # +5 to skip "Body"
    } else {
      main_text <- text
    }
    return(str_trim(main_text))
  }

  extract_newspaper <- function(text) {
    newspaper_pattern <- "(?<=Byline:)\\s*[^\\n]+"
    newspaper <- str_extract(text, newspaper_pattern)
    return(str_trim(newspaper))
  }

  extract_length <- function(text) {
    length_pattern <- "(?<=Length:)\\s*\\d+ words"
    length <- str_extract(text, length_pattern)
    return(str_trim(length))
  }

  extract_language <- function(text) {
    language_pattern <- "(?<=Language:)\\s*\\w+"
    language <- str_extract(text, language_pattern)
    return(language)
  }

  # Apply extraction functions on the combined text from all pages
  date <- extract_date(full_text)
  title <- extract_title(full_text)
  main_text <- extract_main_text(full_text)
  newspaper <- extract_newspaper(full_text)
  length <- extract_length(full_text)
  language <- extract_language(full_text)

  # Create a data frame for this PDF
  pdf_df <- data.frame(
    date = date,
    title = title,
    content = main_text,
    source_name = newspaper,
    language = language,
    length = length,
    stringsAsFactors = FALSE
  )
  return(pdf_df)
}

```

## Try on one pdf
```{r, message = FALSE}
pdf_1 <- extract_pdf_info("../MEN Project/2023_el_tiempo/Advertencia de EE. UU. a Venezuela _ 'sanciones volverán si no hay progreso pronto'.PDF")

# print(pdf_1)
```

## Loading PDF Datsets 

### El Tiempo 2023
```{r, message = FALSE}
# Define PDF directory
el_tiempo_pdf_directory <- "./2023_el_tiempo/"

# Get a list of all PDF files in the directory
el_tiempo_pdf_files <- dir_ls(el_tiempo_pdf_directory, glob = "*.PDF")

# Use purrr to apply the extraction function across all PDF files and combine results into one data frame
el_tiempo_pdf_df_2023 <- map_df(el_tiempo_pdf_files, extract_pdf_info)

```

### El Espectador 2023
```{r, message = FALSE}
# Define PDF directory
el_espectador_pdf_directory <- "./2023_el_espectador/"

# Get a list of all PDF files in the directory
el_espectador_pdf_files <- dir_ls(el_espectador_pdf_directory, glob = "*.PDF")

# Use purrr to apply the extraction function across all PDF files and combine results into one data frame
el_espectador_pdf_df_2023<- map_df(el_espectador_pdf_files, extract_pdf_info)

```

### El Tiempo 2017
```{r, message = FALSE}
# Define PDF directory
el_tiempo_pdf_directory_2017 <- "./2017_el_tiempo/"

# Get a list of all PDF files in the directory
el_tiempo_pdf_files_2017 <- dir_ls(el_tiempo_pdf_directory_2017, glob = "*.PDF")

# Use purrr to apply the extraction function across all PDF files and combine results into one data frame
el_tiempo_pdf_df_2017 <- map_df(el_tiempo_pdf_files_2017, extract_pdf_info)

```

### El Espectador 2017
```{r, message = FALSE}
# Define PDF directory
el_espectador_pdf_directory_2017 <- "./2017_el_espectador/"

# Get a list of all PDF files in the directory
el_espectador_pdf_files_2017 <- dir_ls(el_espectador_pdf_directory_2017, glob = "*.PDF")

# Use purrr to apply the extraction function across all PDF files and combine results into one data frame
el_espectador_pdf_df_2017 <- map_df(el_espectador_pdf_files_2017, extract_pdf_info)

```

### El Espectador 2020
```{r, message = FALSE}
# Define PDF directory
el_espectador_pdf_directory_2020 <- "./2020_el_espectador/"

# Get a list of all PDF files in the directory
el_espectador_pdf_files_2020 <- dir_ls(el_espectador_pdf_directory_2020, glob = "*.PDF")

# Use purrr to apply the extraction function across all PDF files and combine results into one data frame
el_espectador_pdf_df_2020 <- map_df(el_espectador_pdf_files_2020, extract_pdf_info)

```

### El Tiempo 2020
```{r, message = FALSE}
# Define PDF directory
el_tiempo_pdf_directory_2020 <- "./2020_el_tiempo/"

# Get a list of all PDF files in the directory
el_tiempo_pdf_files_2020 <- dir_ls(el_tiempo_pdf_directory_2020, glob = "*.PDF")

# Use purrr to apply the extraction function across all PDF files and combine results into one data frame
el_tiempo_pdf_df_2020 <- map_df(el_tiempo_pdf_files_2020, extract_pdf_info)

```


### Append Articles
```{r}
y2017_articles <- rbind(el_espectador_pdf_df_2017, el_tiempo_pdf_df_2017)

y2020_articles <- rbind(el_tiempo_pdf_df_2020, el_espectador_pdf_df_2020)

y2023_articles <- rbind(el_espectador_pdf_df_2023, el_tiempo_pdf_df_2023)

y2017_articles
y2020_articles
y2023_articles

# create list of datasets fir later
all_articles <- list(y2017_articles, y2020_articles, y2023_articles)
```

# Text Processing 

## Pre-Processing
```{r, message=FALSE}
# y2023_articles <- y2023_articles %>%
#   mutate(date = mdy(date),
#          year = year(date),
#          month = month(date),
#          day = day(date))

# Defining stop words 
stop_words <- c(stopwords("es"), "las", "los", "que", "y", "han", "uno", "dos", "tres", "cuatro", "cinco", "seis", "siete", "ocho", "nueve", "diez", "enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre") 

# Defining text processing function
preprocess_text <- function(data, text_column) {
  data <- data %>%
    mutate(processed_text = sapply(!!sym(text_column), function(text) {
      # Preprocess the text
      text <- tolower(text)  # Convert to lowercase
      text <- str_replace_all(text, "[^[:alpha:][:space:]]", " ")  # Remove punctuation
      text <- str_replace_all(text, "\\s+", " ")  # Replace multiple spaces with a single space
      text <- str_trim(text)  # Trim leading and trailing spaces
      tokens <- unlist(strsplit(text, "\\s+"))  # Split text into words
      tokens <- tokens[!tokens %in% stop_words]  # Remove stop words
      tokens <- lemmatize_words(tokens, lang = "es")  # Lemmatize words (in Spanish)
      return(paste(tokens, collapse = " "))  # Combine tokens back into a single string
    }))
  
  return(data)  # Return the dataset with the new column
}

# Apply function on all years 
processed_dts <- lapply(all_articles, preprocess_text, text_column = "content")

# Re-assign datasets names
y2017_articles <- as.data.frame(processed_dts[1])
y2020_articles <- as.data.frame(processed_dts[2]) 
y2023_articles <- as.data.frame(processed_dts[3])

```

### Tokenization
```{r}
# Tokenize and Preprocess Text 
tidy_2023_dt <- y2023_articles %>%
  unnest_tokens(word, processed_text) %>%  # Tokenize the `processed_text` column
  filter(!word %in% stop_words)  # Remove stop words 

tidy_2020_dt <- y2020_articles %>%
  unnest_tokens(word, processed_text) %>%  
  filter(!word %in% stop_words)  

tidy_2017_dt <- y2017_articles %>%
  unnest_tokens(word, processed_text) %>%  
  filter(!word %in% stop_words)  

# Aggregate word counts across all documents
aggregate_2023_dt <- tidy_2023_dt %>%
  count(word, sort = TRUE)

aggregate_2020_dt <- tidy_2020_dt %>%
  count(word, sort = TRUE)

aggregate_2017_dt <- tidy_2017_dt %>%
  count(word, sort = TRUE)

# View the total word counts
print(aggregate_2023_dt)

```

# TF-IDF Matrix
```{r}
# # Function to calculate TF-IDF for a given dataset
# calculate_tfidf <- function(tidy_data) {
#   
#   # Create a document-term matrix (DTM) using the tokens
#   dtm <- tidy_data %>%
#     count(document = row_number(), word) %>%
#     cast_dtm(document, word, n)
#   
#   # Compute the TF-IDF values
#   tfidf <- weightTfIdf(dtm)
#   
#   return(tfidf)
# }
# 
# # Calculate TF-IDF for each dataset
# tfidf_2017 <- calculate_tfidf(tidy_2017_dt)
# tfidf_2020 <- calculate_tfidf(tidy_2020_dt)
# tfidf_2023 <- calculate_tfidf(tidy_2023_dt)
# 
# # Convert the result to a matrix and view
# tfidf_2017_matrix <- as.matrix(tfidf_2017)
# tfidf_2020_matrix <- as.matrix(tfidf_2020)
# tfidf_2023_matrix <- as.matrix(tfidf_2023)
# 
# # Optionally, convert to data frames for easier inspection
# tfidf_2017_df <- as.data.frame(tfidf_2017_matrix)
# tfidf_2020_df <- as.data.frame(tfidf_2020_matrix)
# tfidf_2023_df <- as.data.frame(tfidf_2023_matrix)
# 
# # View the results
# head(tfidf_2017_df)
# head(tfidf_2020_df)
# head(tfidf_2023_df)

```


### TF-IDF Table

```{r}
# Calculate TF-IDF per document
tf_idf_2017 <- tidy_2017_dt %>%
  count(title, word, sort = TRUE) %>%  # Count occurrences of each word per document
  bind_tf_idf(word, title, n) %>%  # Calculate tf-idf for each term in each document
  arrange(desc(tf_idf))

print(tf_idf_2017)
```



```{r}

# Step 1: Tokenize the text content for each article
tidy_text <- all_articles_processed %>%
  unnest_tokens(word, processed_content) %>%  # Tokenize the `processed_content` column
  filter(!word %in% stop_words)  # Remove stop words
```

```{r}
# Look at most frequent terms co-occurring with "inmigrantes"
tidy_text %>%
  filter(word == "venezuela")

tidy_text %>%
  group_by(word) %>% 
  count()
```

```{r}
# Step 2: Calculate co-occurrence counts for pairs of words in each document
# This creates pairs of words that appear together in the same document
word_pairs <- tidy_text %>%
  pairwise_count(word, title, sort = TRUE) %>%
  filter(item1 == "venezuela" | item2 == "venezuela")  # Keep pairs that include "inmigrantes"

# Step 3: Create the graph
# Rename columns for compatibility with igraph
colnames(word_pairs) <- c("word1", "word2", "n")
graph <- graph_from_data_frame(word_pairs, directed = FALSE)

# Step 4: Visualize the Network
# Customize node size and edge transparency by co-occurrence count
ggraph(graph, layout = "fr") +
  geom_edge_link(aes(edge_alpha = n), color = 'blue3') +  # Edge transparency by co-occurrence count
  geom_node_point(size = 1, color = "skyblue") +  # Nodes representing words
  geom_node_text(aes(label = name), repel = TRUE, size = 4) +  # Word labels with repelling to avoid overlap
  theme_void() +
  labs(title = "Connections of 'Venezuela' in Colombian Newspapers",
       subtitle = "Network of words frequently co-occurring with 'Venezuela'") +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))


```

```{r}
# Define words to exclude
excluded_words <- c("page", "of", "tiempo", "uso")

# Filter out rows where either word1 or word2 is in the excluded words list
top_cooccurrences <- word_pairs %>%
  filter((word1 == "venezuela" | word2 == "venezuela") & 
         !word1 %in% excluded_words & 
         !word2 %in% excluded_words) %>%
  arrange(desc(n)) %>%
  head(30)  # Display top 10 co-occurring words

# Display the table
print(top_cooccurrences)

```

```{r}
# Define words to exclude
excluded_words <- c("page", "of", "tiempo", "uso")

# Step 1: Filter out specified words and ensure "venezuela" is present
filtered_pairs <- word_pairs %>%
  filter((word1 == "venezuela" | word2 == "venezuela") & 
         !word1 %in% excluded_words & 
         !word2 %in% excluded_words)

# Step 2: Make pairs unique by sorting words alphabetically within each pair
unique_pairs <- filtered_pairs %>%
  mutate(word1 = pmin(word1, word2),  # Ensure word1 is alphabetically first
         word2 = pmax(word1, word2)) %>%  # Ensure word2 is alphabetically second
  distinct(word1, word2, .keep_all = TRUE)  # Remove duplicate pairs

# Step 3: Display the top 10 unique co-occurrences
top_cooccurrences <- unique_pairs %>%
  arrange(desc(n)) %>%
  head(10)  # Show top 10 pairs

# Display the table
print(top_cooccurrences)

```

```{r}
# Define words to exclude
excluded_words <- c("page", "of", "tiempo", "uso", "copyright", "dijo", "según", "dos", "ser", "si", "solo", "además", "parte", " puede", "tras", "aunque", "hoy", "pues", "luego", "mientras", "hacer", "full", "text", "hace", "ayer", "año", "años", "abstract","así", "después", "aseguró", "semana", "tres", "embargo", "mismo", "puede", "vez", "va", "menos", "reproducción", "cada", "die", "deben", "debe", "anunció", "domingo", "jueves", "hacia")

# Step 1: Filter out specified words and ensure "venezuela" is present
filtered_pairs <- word_pairs %>%
  filter((word1 == "venezuela" | word2 == "venezuela") & 
         !word1 %in% excluded_words & 
         !word2 %in% excluded_words)

# Step 2: Make pairs unique by sorting words alphabetically within each pair
# and ensure word1 and word2 are not the same
unique_pairs <- filtered_pairs %>%
  mutate(word1 = pmin(word1, word2),  # Ensure word1 is alphabetically first
         word2 = pmax(word1, word2)) %>%  # Ensure word2 is alphabetically second
  filter(word1 != word2) %>%  # Remove pairs where word1 is the same as word2
  distinct(word1, word2, .keep_all = TRUE)  # Remove duplicate pairs

# Step 3: Display the top 10 unique co-occurrences
top_cooccurrences <- unique_pairs %>%
  arrange(desc(n)) %>%
  head(50)  
# Display the table
print(top_cooccurrences)

top_cooccurrences %>%
  ggplot(aes(x = reorder(word1, n), y = n)) + 
  geom_col() +
  coord_flip()+
  labs(title = "Top Co-occurring Words with 'Venezuela' 2023",
       x = "Word",
       y = "Co-occurrence Count") +
  theme_classic()

```

```{r}
# Define quantile thresholds for high, medium, and low connection strengths
high_threshold <- quantile(unique_pairs$n, 0.66)
medium_threshold <- quantile(unique_pairs$n, 0.33)

# Split into high, medium, and low based on thresholds
high_pairs <- unique_pairs %>% filter(n >= high_threshold)
medium_pairs <- unique_pairs %>% filter(n < high_threshold & n >= medium_threshold)
low_pairs <- unique_pairs %>% filter(n < medium_threshold)

```

```{r}
# High connection graph
high_graph <- graph_from_data_frame(high_pairs, directed = FALSE)

ggraph(high_graph, layout = "fr") +
  geom_edge_link(aes(edge_alpha = n), color = 'blue3', edge_width = 1.5) +  # Thicker edges for high connections
  geom_node_point(size = 4, color = "skyblue") +  # Larger nodes for high connections
  geom_node_text(aes(label = name), repel = TRUE, size = 4) +
  theme_void() +
  labs(title = "High Co-occurrence Connections of 'Venezuela'",
       subtitle = "Top words with strong co-occurrence with 'Venezuela'") +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

```

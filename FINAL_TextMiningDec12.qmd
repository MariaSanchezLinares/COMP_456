---
title: "Final_TextMining"
format: html
editor: visual
---

```{r, message = FALSE}
# Load Necessary Libraries
library(dplyr)
library(tm)
library(tidytext)       # For tokenization
library(pdftools) # For PDF text extraction
library(stringr)    # For string manipulation functions, including str_extract()
library(ggplot2) 
library(purrr)
library(stopwords)
library(textstem)
library(data.table)
library(fs)  # For file handling

#source script with useful functions

source("./project_func.R")
```

# Data Collection

## Extracting functions

```{r, message = FALSE}

# Function to extract relevant information from a single PDF
extract_pdf_info <- function(pdf_file) {
  # Extract text from all pages of the PDF and concatenate
  pdf_text_data <- pdf_text(pdf_file)
  full_text <- paste(pdf_text_data, collapse = "\n")  # Combine all pages

  # Extraction functions
  extract_date <- function(text) {
    date_pattern <- "(?<=Load-Date:)\\s*\\w+ \\d{1,2}, \\d{4}"
    date <- str_extract(text, date_pattern)
    return(date)
  }
  
  extract_title <- function(text) {
    lines <- str_split(text, "\n")[[1]]
    title <- lines[2]  # The title is on the second line
    return(str_trim(title))
  }

  extract_main_text <- function(text) {
    body_start <- str_locate(text, "Body")[, 1]
    classification_start <- str_locate(text, "Classification")[, 1]
    end_document_start <- str_locate(text, "End of Document")[, 1]
    main_text_end <- min(c(na.omit(c(classification_start, end_document_start))), na.rm = TRUE)
    
    if (!is.na(body_start) && !is.na(main_text_end)) {
      main_text <- str_sub(text, body_start + 5, main_text_end - 1)  # +5 to skip "Body"
    } else {
      main_text <- text
    }
    return(str_trim(main_text))
  }

  extract_newspaper <- function(text) {
    newspaper_pattern <- "(?<=Byline:)\\s*[^\\n]+"
    newspaper <- str_extract(text, newspaper_pattern)
    return(str_trim(newspaper))
  }

  extract_length <- function(text) {
    length_pattern <- "(?<=Length:)\\s*\\d+ words"
    length <- str_extract(text, length_pattern)
    return(str_trim(length))
  }

  extract_language <- function(text) {
    language_pattern <- "(?<=Language:)\\s*\\w+"
    language <- str_extract(text, language_pattern)
    return(language)
  }

  # Extraction functions on the combined text from all pages
  date <- extract_date(full_text)
  title <- extract_title(full_text)
  main_text <- extract_main_text(full_text)
  newspaper <- extract_newspaper(full_text)
  length <- extract_length(full_text)
  language <- extract_language(full_text)

  # Create a data frame
  pdf_df <- data.frame(
    date = date,
    title = title,
    content = main_text,
    source_name = newspaper,
    language = language,
    length = length,
    stringsAsFactors = FALSE
  )
  
  pdf_df <- pdf_df %>% 
    mutate(main_text = gsub(
      "\nCopyright Grupo de Diarios América - GDA/El Tiempo/Colombia Todos los derechos reservados\\. Prohibido su uso\no reproducción en Colombia", 
      "", 
      main_text))
  
  return(pdf_df)
}

```

# Finding directories

```{r, message = FALSE}
# PDF directory
pdf_directory_2023 <- "../articles2023"
pdf_directory_2020 <- "../articles2020"
pdf_directory_2017 <- "../articles2017"


# List of all PDF files in the directory
pdf_files_2023 <- dir_ls(pdf_directory_2023, glob = "*.PDF")
pdf_files_2020 <- dir_ls(pdf_directory_2020, glob = "*.PDF")
pdf_files_2017 <- dir_ls(pdf_directory_2017, glob = "*.PDF")

# Extraction function across all PDF files and combine results into one data frame
pdf_df_2023 <- map_df(pdf_files_2023, extract_pdf_info)
pdf_df_2020 <- map_df(pdf_files_2020, extract_pdf_info)
pdf_df_2017 <- map_df(pdf_files_2017, extract_pdf_info)
```

## De-duplicating data

```{r}

pdf_df_2023 <- as.data.frame(ea_no_dups(as.data.table(pdf_df_2023), in_vars_key = c("title")))
pdf_df_2020 <- as.data.frame(ea_no_dups(as.data.table(pdf_df_2020), in_vars_key = c("title")))
pdf_df_2017 <- as.data.frame(ea_no_dups(as.data.table(pdf_df_2017), in_vars_key = c("title")))

```

# Text Processing

## Pre-Processing

```{r, message=FALSE}
# Defining stop words 
stop_words <- c(stopwords("es"), "uno", "dos", "tres", "cuatro", "cinco", "seis", "siete", "ocho", "nueve", "diez", "enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", "vs.", "a.m", "p.m", "vs", "page", "copyright")  

preprocess_text <- function(data, text_column) {
  data <- data %>%
    mutate(nchar = nchar(content)) %>% 
    filter(nchar > 750) %>%  # Filter short documents (less than ~150 words)
    mutate(tokens = sapply(!!sym(text_column), function(text) {
      # Preprocess the text
      text <- tolower(text)  # Convert to lowercase
      text <- str_replace_all(text, "[^[:alpha:][:space:]]", " ")  # Remove punctuation
      text <- str_replace_all(text, "\\s+", " ")  # Replace multiple spaces with a single space
      text <- str_trim(text)  # Trim leading and trailing spaces
      tokens <- unlist(strsplit(text, "\\s+"))  # Tokenize into words
      tokens <- tokens[!tokens %in% stop_words]  # Remove stop words
      tokens <- lemmatize_words(tokens, lang = "es")  # Lemmatize tokens
      return(paste(tokens, collapse = " "))  # Combine tokens back into a single string
    }))
  
  return(data)  # Return the dataset with the new column
}

# Re-assign datasets names
y2023_articles <- preprocess_text(pdf_df_2023, text_column = "content")
y2020_articles <- preprocess_text(pdf_df_2020, text_column = "content")
y2017_articles <- preprocess_text(pdf_df_2017, text_column = "content")
```

## TF-IDF

#### Calculating the values for all words

```{r}
tidy_text2023 <- y2023_articles %>%
  unnest_tokens(word, tokens) # Tokenize the `processed_content` column

tf_idf2023 <- tidy_text2023 %>%
  count(title, word, sort = TRUE) %>%  # Count occurrences of each word per document
  bind_tf_idf(word, title, n)  # Calculate tf-idf for each term in each document

tidy_text2020 <- y2020_articles %>%
  unnest_tokens(word, tokens) # Tokenize the `processed_content` column

tf_idf2020 <- tidy_text2020 %>%
  count(title, word, sort = TRUE) %>%  # Count occurrences of each word per document
  bind_tf_idf(word, title, n)  # Calculate tf-idf for each term in each document

tidy_text2017 <- y2017_articles %>%
  unnest_tokens(word, tokens) # Tokenize the `processed_content` column

tf_idf2017 <- tidy_text2017 %>%
  count(title, word, sort = TRUE) %>%  # Count occurrences of each word per document
  bind_tf_idf(word, title, n)  # Calculate tf-idf for each term in each document
```

#### Filtering only words above the 0.1 threshold

```{r}
tf_idf2023 <- tf_idf2023 %>% 
  filter(tf_idf <= 0.1) 
tf_idf2023
tf_idf2020 <- tf_idf2020 %>% 
  filter(tf_idf <= 0.1) 
tf_idf2020
tf_idf2017 <- tf_idf2017 %>% 
  filter(tf_idf <= 0.1) 
tf_idf2017
```

```{r}
ALL_tf_idf <- rbind(tf_idf2023, tf_idf2020, tf_idf2017)

ALL_articles <- rbind( y2023_articles, y2020_articles, y2017_articles)
```

#Creating

```{r}
words_to_keep <- ALL_tf_idf$word

clean_data <- ALL_articles %>%
  unnest_tokens(word, tokens) %>%  # Tokenize the text
  filter(word %in% words_to_keep) %>%  # Keep only words in `words_to_keep`
  group_by(title, date, content, source_name, language, length, main_text, nchar) %>% # Group by all columns you want to retain
  summarize(processed_text = str_c(word, collapse = " "), .groups = "drop")  # Collapse words into a single string per group

clean_data <- clean_data %>% 
  mutate(date = mdy(date),
         year = year(date),
         month = month(date),
         day = day(date),
         ID = str_pad(1:nrow(clean_data), width = 4, pad = "0")
         ) %>% 
  filter(year == 2017 | year == 2020 | year == 2023) %>% 
  select(ID, date, title , content, source_name, language, length, nchar, processed_text, year) 

```

# Export data

```{r, message=FALSE}
write.csv(clean_data, file = "./ALL_articles.csv")

```
